{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMk43unn7kn1D5udBvk///4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ur7s1HYVIZ26","executionInfo":{"status":"ok","timestamp":1746460916376,"user_tz":-330,"elapsed":1194,"user":{"displayName":"Sri Hari","userId":"10362809657681439785"}},"outputId":"1bd1a01e-3d40-4723-dca4-ac651dc7b73a"},"outputs":[{"output_type":"stream","name":"stdout","text":["   Row No.   Customer            Surname  Credit score     Geography  Age  \\\n","0        1  110023105             Ajayan           549      New York   29   \n","1        2  110023110             Akshay           674        France   32   \n","2        3  110231790  Ramesh Periyasami           729  Switzerland    47   \n","3        4  110023101           Sandhiya           502         Qatar   37   \n","4        5  110024079            Manisha           407        Canada   25   \n","\n","   Gender  Tenure     Balance  No. of Product Has Cr.Card  Is Activated  \\\n","0    Male       2   127542.50               1         Yes             0   \n","1   Male        1    21250.00               0         Yes             1   \n","2    Male       3  1020063.75               0          No             1   \n","3  Female       2    72271.25               0          No             0   \n","4  Female       2   425000.00               1          No             0   \n","\n","    Estimated  Exited  \n","0   127977.43       1  \n","1    21337.50       1  \n","2  1024263.63       0  \n","3    72563.81       1  \n","4   426750.00       0  \n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 10 entries, 0 to 9\n","Data columns (total 14 columns):\n"," #   Column          Non-Null Count  Dtype  \n","---  ------          --------------  -----  \n"," 0   Row No.         10 non-null     int64  \n"," 1   Customer        10 non-null     int64  \n"," 2   Surname         10 non-null     object \n"," 3   Credit score    10 non-null     int64  \n"," 4   Geography       10 non-null     object \n"," 5   Age             10 non-null     int64  \n"," 6   Gender          10 non-null     object \n"," 7   Tenure          10 non-null     int64  \n"," 8   Balance         10 non-null     float64\n"," 9   No. of Product  10 non-null     int64  \n"," 10  Has Cr.Card     10 non-null     object \n"," 11  Is Activated    10 non-null     int64  \n"," 12  Estimated       10 non-null     float64\n"," 13  Exited          10 non-null     int64  \n","dtypes: float64(2), int64(8), object(4)\n","memory usage: 1.2+ KB\n","None\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-6-573208672ebc>:20: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n","  df[col] = pd.to_numeric(df[col], errors='ignore')  # Keep non-numeric as-is\n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.5\n","Confusion Matrix:\n"," [[0 1]\n"," [0 1]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","         0.0       0.00      0.00      0.00         1\n","         1.0       0.50      1.00      0.67         1\n","\n","    accuracy                           0.50         2\n","   macro avg       0.25      0.50      0.33         2\n","weighted avg       0.25      0.50      0.33         2\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"]}],"source":["# 1. Import libraries\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.impute import SimpleImputer\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","\n","# 2. Load the Excel file\n","df = pd.read_excel('/content/Customer churn (1).xlsx')  # Make sure file name matches\n","df.columns = df.columns.str.strip()  # Remove leading/trailing spaces in column names\n","print(df.head())\n","print(df.info())\n","\n","# 3. Handle missing values\n","\n","# Convert numeric-like strings to numbers, non-numeric to NaN\n","for col in df.columns:\n","    df[col] = pd.to_numeric(df[col], errors='ignore')  # Keep non-numeric as-is\n","\n","# Separate columns by type\n","numerical_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()\n","categorical_cols = df.select_dtypes(include=['object']).columns.tolist()\n","\n","# Impute numeric missing values\n","num_imputer = SimpleImputer(strategy='mean')\n","df[numerical_cols] = num_imputer.fit_transform(df[numerical_cols])\n","\n","# Impute categorical missing values\n","cat_imputer = SimpleImputer(strategy='most_frequent')\n","df[categorical_cols] = cat_imputer.fit_transform(df[categorical_cols])\n","\n","# 4. Encode categorical columns\n","label_encoders = {}\n","for col in categorical_cols:\n","    le = LabelEncoder()\n","    df[col] = le.fit_transform(df[col])\n","    label_encoders[col] = le\n","\n","# 5. Define features and target\n","X = df.drop('Exited', axis=1)  # Make sure 'Exited' is the correct target column\n","y = df['Exited']\n","\n","# 6. Feature scaling\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# 7. Train-test split\n","X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n","\n","# 8. Train model\n","model = RandomForestClassifier(n_estimators=100, random_state=42)\n","model.fit(X_train, y_train)\n","\n","# 9. Evaluate model\n","y_pred = model.predict(X_test)\n","print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n","print(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n","print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n"]}]}